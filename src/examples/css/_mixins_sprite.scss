// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
/* stylelint-disable */
$sheet-factory-name: 'sheet-factory';
$sheet-factory-x: 160px;
$sheet-factory-y: 117px;
$sheet-factory-offset-x: -160px;
$sheet-factory-offset-y: -117px;
$sheet-factory-width: 149px;
$sheet-factory-height: 84px;
$sheet-factory-total-width: 348px;
$sheet-factory-total-height: 306px;
$sheet-factory-image: '../img/common_pack.png';
$sheet-factory: (160px, 117px, -160px, -117px, 149px, 84px, 348px, 306px, '../img/common_pack.png', 'sheet-factory', );
$sheet-home-name: 'sheet-home';
$sheet-home-x: 0px;
$sheet-home-y: 0px;
$sheet-home-offset-x: 0px;
$sheet-home-offset-y: 0px;
$sheet-home-width: 175px;
$sheet-home-height: 107px;
$sheet-home-total-width: 348px;
$sheet-home-total-height: 306px;
$sheet-home-image: '../img/common_pack.png';
$sheet-home: (0px, 0px, 0px, 0px, 175px, 107px, 348px, 306px, '../img/common_pack.png', 'sheet-home', );
$sheet-mail-name: 'sheet-mail';
$sheet-mail-x: 0px;
$sheet-mail-y: 117px;
$sheet-mail-offset-x: 0px;
$sheet-mail-offset-y: -117px;
$sheet-mail-width: 150px;
$sheet-mail-height: 97px;
$sheet-mail-total-width: 348px;
$sheet-mail-total-height: 306px;
$sheet-mail-image: '../img/common_pack.png';
$sheet-mail: (0px, 117px, 0px, -117px, 150px, 97px, 348px, 306px, '../img/common_pack.png', 'sheet-mail', );
$sheet-network-name: 'sheet-network';
$sheet-network-x: 185px;
$sheet-network-y: 0px;
$sheet-network-offset-x: -185px;
$sheet-network-offset-y: 0px;
$sheet-network-width: 163px;
$sheet-network-height: 103px;
$sheet-network-total-width: 348px;
$sheet-network-total-height: 306px;
$sheet-network-image: '../img/common_pack.png';
$sheet-network: (185px, 0px, -185px, 0px, 163px, 103px, 348px, 306px, '../img/common_pack.png', 'sheet-network', );
$sheet-school-name: 'sheet-school';
$sheet-school-x: 0px;
$sheet-school-y: 224px;
$sheet-school-offset-x: 0px;
$sheet-school-offset-y: -224px;
$sheet-school-width: 148px;
$sheet-school-height: 82px;
$sheet-school-total-width: 348px;
$sheet-school-total-height: 306px;
$sheet-school-image: '../img/common_pack.png';
$sheet-school: (0px, 224px, 0px, -224px, 148px, 82px, 348px, 306px, '../img/common_pack.png', 'sheet-school', );
$spritesheet-width: 348px;
$spritesheet-height: 306px;
$spritesheet-image: '../img/common_pack.png';
$spritesheet-sprites: ($sheet-factory, $sheet-home, $sheet-mail, $sheet-network, $sheet-school, );
$spritesheet: (348px, 306px, '../img/common_pack.png', $spritesheet-sprites, );
/* stylelint-anable */
// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>

@mixin sprite-width($sprite, $ratio:1) {
  width: nth($sprite, 5)/$ratio;
}

@mixin sprite-height($sprite, $ratio:1) {
  height: nth($sprite, 6)/$ratio;
}

@mixin sprite-position($sprite, $ratio:1) {
  $sprite-offset-x: nth($sprite, 3)/$ratio;
  $sprite-offset-y: nth($sprite, 4)/$ratio;
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite-size($sprite, $ratio:1) {
  background-size: nth($sprite, 7)/$ratio nth($sprite, 8)/$ratio;
}

@mixin sprite($sprite, $ratio:1) {
  @include sprite-image($sprite);
  @include sprite-position($sprite, $ratio);
  @include sprite-width($sprite, $ratio);
  @include sprite-height($sprite, $ratio);
  @include sprite-size($sprite, $ratio);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
